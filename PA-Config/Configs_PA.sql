-- Todas Configs de 1 Público-Alvo:
-- (usando variáveis, with recursive, unions, e FIND_IN_SET)

SET @PA = 104; 

SET @OP_PA = (SELECT P.CD_EXPRESSAO FROM TB_PUBLICOALVO P WHERE P.CD_PUBLICOALVO = @PA );

SET @OPERADORES = (
WITH RECURSIVE OPERADORES AS (
	SELECT OP.CD_OPERADOR, OP_E.OP1 AS OP1E, OP_E.OP2 AS OP2E, OP_OU.OP1 AS OP1OU, OP_OU.OP2 AS OP2OU
	FROM TB_PUBLICOALVO_OPERADOR OP
	LEFT JOIN TB_PUBLICOALVO_OPERADOR_E OP_E ON OP.CD_OPERADOR=OP_E.CD_OPERADOR
	LEFT JOIN TB_PUBLICOALVO_OPERADOR_OU OP_OU ON OP.CD_OPERADOR=OP_OU.CD_OPERADOR
	WHERE OP.CD_OPERADOR = @OP_PA 
 UNION 
	SELECT A.*
	FROM (SELECT OP.CD_OPERADOR, OP_E.OP1 AS OP1E, OP_E.OP2 AS OP2E, OP_OU.OP1 AS OP1OU, OP_OU.OP2 AS OP2OU 
		FROM TB_PUBLICOALVO_OPERADOR AS OP
		LEFT JOIN TB_PUBLICOALVO_OPERADOR_E OP_E ON OP.CD_OPERADOR=OP_E.CD_OPERADOR
		LEFT JOIN TB_PUBLICOALVO_OPERADOR_OU OP_OU ON OP.CD_OPERADOR=OP_OU.CD_OPERADOR
		)
	 A, OPERADORES AS OPS 
	WHERE (A.CD_OPERADOR = OPS.OP1E OR A.CD_OPERADOR = OPS.OP2E) OR (A.CD_OPERADOR = OPS.OP1OU OR A.CD_OPERADOR = OPS.OP2OU)
)
SELECT GROUP_CONCAT(CD_OPERADOR ORDER BY CD_OPERADOR) FROM OPERADORES 
);  
-- SELECT @OPERADORES ; 

SELECT PA.CD_PUBLICOALVO, PA.NM_PUBLICOALVO AS 'Nome Público-Alvo'
	, IF(PA.ID_APLICACAO_ADMIN_UNIDADE, 'AdmUnidade', 'Administrador') AS ADM
	, UPA.DS_USUARIO AS 'Responsável'
	, (CASE PA.ID_OPERACAO WHEN 0 THEN 'E' WHEN 1 THEN 'OU' END) AS OPERACAO 
	, CONCAT( IF(PA.CURSO_MULTIPLICADORES, '[CURSO-Responsável Turma] ', '')
		,IF(PA.CURSO_OBRIGATORIEDADE, '[CURSO-Obrigatoriedade]', '') ) AS 'Aplicar por Contexto'
	, IF(PA.IS_MEUDESEMPENHO, 'Sim', 'Não') AS 'Cálculo Meu Desempenho'
	, PA.CD_EXPRESSAO, B.*
FROM TB_PUBLICOALVO PA 
INNER JOIN (
-- CARGO 
	(SELECT PACAR.CD_TERMO, 'Cargo' AS TIPO, CAR.CD_CARGO AS CD, CAR.NM_CARGO AS NOME, CAR.CD_CODIGO AS CODIGO, '' AS OBS
	FROM TB_PUBLICOALVO_TERMO_CARGO_CARGO PACAR 
	INNER JOIN TB_CARGO CAR ON CAR.CD_CARGO=PACAR.CD_CARGO
	WHERE FIND_IN_SET(PACAR.CD_TERMO, @OPERADORES ) 
	) UNION ALL 
-- SETOR (normal como Cargo)
	(SELECT PASET.CD_TERMO, 'Setor' AS TIPO, SE.CD_SETOR AS CD, SE.NM_SETOR AS NOME, SE.CD_CODIGO AS CODIGO, '' AS OBS
	FROM TB_PUBLICOALVO_TERMO_SETOR_SETOR PASET
	INNER JOIN TB_SETOR SE ON SE.CD_SETOR=PASET.CD_SETOR 
	WHERE FIND_IN_SET(PASET.CD_TERMO, @OPERADORES ) 
	) UNION ALL 
-- FUNCAO (Cargo da Funcao)
	(SELECT PAFUNCAR.CD_TERMO, 'Função' AS TIPO, CAR.CD_CARGO AS CD, CAR.NM_CARGO AS NOME, CAR.CD_CODIGO AS CODIGO, '' AS OBS
	FROM TB_PUBLICOALVO_TERMO_FUNCAO_CARGO PAFUNCAR
	INNER JOIN TB_CARGO CAR ON CAR.CD_CARGO=PAFUNCAR.CD_CARGO
	WHERE FIND_IN_SET(PAFUNCAR.CD_TERMO, @OPERADORES ) 
	) UNION ALL 
-- SETOR DA FUNCAO 
	(SELECT PAFUNSET.CD_TERMO, 'Setor da Função' AS TIPO, SE.CD_SETOR AS CD, SE.NM_SETOR AS NOME, SE.CD_CODIGO AS CODIGO, '' AS OBS
	FROM TB_PUBLICOALVO_TERMO_SETORFUNCAO_SETOR PAFUNSET
	INNER JOIN TB_SETOR SE ON SE.CD_SETOR=PAFUNSET.CD_SETOR 
	WHERE FIND_IN_SET(PAFUNSET.CD_TERMO, @OPERADORES ) 
	) UNION ALL 
-- UNIDADE 
	(SELECT PAUNI.CD_TERMO, 'Unidade' AS TIPO, UNI.CD_UNIDADE AS CD, UNI.NM_UNIDADE AS NOME, UNI.DS_CODIGO AS CODIGO, UNI.ID_HIERARQUIA AS OBS
	FROM TB_PUBLICOALVO_TERMO_UNIDADE_UNIDADE PAUNI
	INNER JOIN TB_UNIDADE UNI ON PAUNI.CD_UNIDADE = UNI.CD_UNIDADE
	WHERE FIND_IN_SET(PAUNI.CD_TERMO, @OPERADORES ) 
	ORDER BY UNI.ID_HIERARQUIA LIMIT 999999 
	) UNION ALL 
-- USUARIO 
	/* só existe na TB_PUBLICOALVO_OPERADOR_OU; o bloco com WITH RECURSIVE já trata os 3 caminhos juntos */ 
	( SELECT PAUSER.CD_TERMO, 'Usuário' AS TIPO, UK.CD_USUARIOVEC AS CD, U.DS_USUARIO AS NOME, U.ID_IDENTIFICADOR AS CODIGO
	--	 , U.DS_LOGIN AS OBS 	-- Substituir pela data de processamento do user no PA
	 , (SELECT IFNULL(PAU.DT_PROCESSAMENTO, 'Não processado') FROM TB_PUBLICOALVO_USUARIO PAU WHERE PAU.CD_USUARIOVEC=UK.CD_USUARIOVEC AND PAU.CD_PUBLICOALVO=@PA GROUP BY UK.CD_USUARIOVEC) AS OBS 
	FROM TB_PUBLICOALVO_TERMO_USUARIO_USUARIO PAUSER 
	INNER JOIN TB_USUARIO_KONVIVA UK ON UK.CD_USUARIOVEC=PAUSER.CD_USUARIO
	INNER JOIN TB_USUARIO U ON U.CD_USUARIO=UK.CD_USUARIO
	WHERE FIND_IN_SET(PAUSER.CD_TERMO, @OPERADORES ) 
	) UNION ALL 
-- ATRIBUTO DO USUARIO 
	(SELECT PATRUSER.CD_TERMO, 'Atributo de Usuário' AS TIPO, ATU.CD_CAMPOEXTRA AS CD
	 , COALESCE(CE.DS_LABEL, (CASE ATU.ID_TIPO WHEN 1 THEN 'Data de Admissão' WHEN 2 THEN 'Data de Nascimento' WHEN 3 THEN 'Gênero' END) ) AS NOME 
	 , COALESCE(CE.ID_KEY, CONCAT('CD_VALOR-CD_TIPO: ', ATU.CD_VALOR,'-',ATU.ID_TIPO) ) AS CODIGO 
	 , CONCAT( (CASE ATU.ID_FILTRO 
			WHEN 0 THEN 'Começa com: [' WHEN 1 THEN 'Contém: [' WHEN 2 THEN 'Igual a: [' 	-- Filtros de String
			WHEN 3 THEN 'A partir de: ' WHEN 4 THEN 'Até: ' WHEN 5 THEN 'Entre: ' 			-- Filtros de Data
			ELSE ATU.ID_FILTRO END) 
		, (CASE -- ATU.ID_TIPO 
			WHEN ATU.ID_TIPO = 0 THEN  CONCAT( CAST( ATUSTR.DS_VALOR AS CHAR CHARACTER SET UTF8) COLLATE UTF8_UNICODE_CI , ']' ) -- Quando é String, valor direto
			WHEN ATU.ID_TIPO IN (1, 2)  THEN (CASE ATU.ID_FILTRO 		-- Quando é campo DataAdmissão ou DataNascimento, apenas 3 opções de filtro de Data
				WHEN 3 THEN CONCAT( IFNULL(DATE_FORMAT(ATUDT.DS_VALOR_DE, '%d-%m-%Y'),'-') ) -- A partir de
				WHEN 4 THEN CONCAT( IFNULL(DATE_FORMAT(ATUDT.DS_VALOR_ATE, '%d-%m-%Y'),'-') ) -- Até
				WHEN 5 THEN CONCAT('De: ', IFNULL(DATE_FORMAT(ATUDT.DS_VALOR_DE, '%d-%m-%Y'),'-'), '; Até: ', IFNULL(DATE_FORMAT(ATUDT.DS_VALOR_ATE, '%d-%m-%Y'),'-') ) -- Entre
				ELSE CONCAT('ATU.ID_FILTRO=',ATU.ID_FILTRO)	 END)
			WHEN ATU.ID_TIPO = 3 THEN (CASE ATUSTR.DS_VALOR WHEN 0 THEN 'Masculino]' WHEN 1 THEN 'Feminino]' ELSE IFNULL(ATUSTR.DS_VALOR,'-]') END) -- Quando é Genero, traduz pseudo-string pra opção 
			ELSE CONCAT('ATU.ID_TIPO=',ATU.ID_TIPO) END) -- caso implemente outro tipo a ser lido como atributo
		) AS OBS
	FROM TB_PUBLICOALVO_TERMO_ATRIBUTO_ATRIBUTO PATRUSER
	INNER JOIN TB_ATRIBUTOUSUARIO ATU ON (ATU.CD_VALOR = PATRUSER.CD_VALOR AND ATU.ID_FILTRO=PATRUSER.ID_FILTRO AND ATU.ID_TIPO=PATRUSER.ID_TIPO)
	LEFT JOIN TB_CAMPOEXTRA CE ON CE.CD_CAMPOEXTRA=ATU.CD_CAMPOEXTRA 
	LEFT JOIN TB_ATRIBUTOUSUARIO_STRING ATUSTR ON ATU.CD_VALOR=ATUSTR.CD_ATRIBUTOUSUARIO_STRING AND ATU.ID_TIPO IN (0,3)
	LEFT JOIN TB_ATRIBUTOUSUARIO_DATA ATUDT ON ATU.CD_VALOR=ATUDT.CD_ATRIBUTOUSUARIO_DATA AND ATU.ID_TIPO IN (1,2)
--	LEFT JOIN TB_ATRIBUTOUSUARIO_CONSTANTE ATUCON ON ATU.CD_VALOR=ATUCON.CD_ATRIBUTOUSUARIO_CONSTANTE AND ATU.ID_TIPO IN (4)
	WHERE FIND_IN_SET(PATRUSER.CD_TERMO, @OPERADORES )
	) UNION ALL 
-- ATRIBUTO DA UNIDADE 
	(SELECT ATRUNI.CD_TERMO, 'Atributo de Unidade' AS TIPO, ATU.CD_CAMPOEXTRA AS CD, COALESCE(CE.DS_LABEL, '..') AS NOME
	 , COALESCE(CE.ID_KEY, CONCAT('CD_VALOR-CD_TIPO: ', ATU.CD_VALOR,'-',ATU.ID_TIPO) ) AS CODIGO 
	 , CONCAT( (CASE ATU.ID_FILTRO 
			WHEN 0 THEN 'Começa com: [' WHEN 1 THEN 'Contém: [' WHEN 2 THEN 'Igual a: [' 	-- Filtros de String
			WHEN 3 THEN 'A partir de: ' WHEN 4 THEN 'Até: ' WHEN 5 THEN 'Entre: ' 			-- Filtros de Data
			ELSE ATU.ID_FILTRO END) 
		, CAST( ATUSTR.DS_VALOR AS CHAR CHARACTER SET UTF8) COLLATE UTF8_UNICODE_CI, ']' -- direto da string pois AtributoUnidade não tem outro tipo default, apenas por CampoExtra atualmente
		) AS OBS
	FROM TB_PUBLICOALVO_TERMO_ATRIBUTO_ATRIBUTO_UNIDADE ATRUNI 
	INNER JOIN TB_ATRIBUTOUNIDADE ATU ON ATU.CD_VALOR = ATRUNI.CD_VALOR
	INNER JOIN TB_ATRIBUTOUNIDADE_STRING ATUSTR ON ATU.CD_VALOR=ATUSTR.CD_ATRIBUTOUNIDADE_STRING
	INNER JOIN TB_CAMPOEXTRA CE ON CE.CD_CAMPOEXTRA=ATU.CD_CAMPOEXTRA
	WHERE FIND_IN_SET(ATRUNI.CD_TERMO, @OPERADORES )
	) UNION ALL 
-- PERFIL 
	(SELECT PAPER.CD_TERMO, 'Perfil' AS TIPO, PER.CD_PERFIL AS CD, PER.DS_PERFIL AS NOME, PER.ID_CODIGO AS CODIGO, '' AS OBS
	FROM TB_PUBLICOALVO_TERMO_PERFIL_PERFIL PAPER
	INNER JOIN TB_PERFIL PER ON PER.CD_PERFIL=PAPER.CD_PERFIL
	WHERE FIND_IN_SET(PAPER.CD_TERMO, @OPERADORES ) 
	)
) B ON FIND_IN_SET(PA.CD_EXPRESSAO, @OPERADORES ) 
LEFT JOIN TB_USUARIO_KONVIVA UKPA ON UKPA.CD_USUARIOVEC=PA.CD_RESPONSAVEL
LEFT JOIN TB_USUARIO UPA ON UPA.CD_USUARIO=UKPA.CD_USUARIO
;